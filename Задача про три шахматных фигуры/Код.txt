#include <iostream>
#include <cmath>

using namespace std;

/**
 * @mainpage Главная страница
**/
void help()
/**
 * @brief Функция вывода на экран правил игры
**/
{
    cout<<"Координаты вводятся по порядку : король, ладья, слон"<<endl;
    cout<<"Правила ввода координат:"<<endl;
    cout<<"1) Ввод начинается с буквы из списка A,B,C,D,E,F,G,H"<<endl;
    cout<<"2) После буквы вводится цифра от 1 до 8"<<endl;
    cout<<"После ввода координаты необходимо нажать Enter для ввода следующей координаты"<<endl;
    cout<<"Координаты фигур не должны совпадать"<<endl;
}
void errors_coord(int x)
/**
 * @brief Функция вывода ошибок
 * @param x – номер ошибки
**/
{
    if(x==1)
    {
        cout<<"Координата не верная, попробуйте ввести её заново или посмотрите справку: /help"<<endl;
    }
    if(x==2)
    {
        cout<<"Одинаковые координаты короля и ладьи, введите введите координаты ладьи заново: "<<endl;
    }
    if(x==3)
    {
        cout<<"Одинаковые координаты короля и слона, введите координаты слона заново: "<<endl;
    }
    if(x==4)
    {
        cout<<"Одинаковые координаты ладьи и слона, введите координаты слона заново: "<<endl;
    }
}
int translate_y(char y) //Функция преобразования cимвола в целое число, где у - номер столбца
/**
 * @brief Функция преобразования cимвола в целое число
 * @param у - номер столбца
**/
{
    if(y=='1')
    {
        return 1;
    }
    if (y=='2')
    {
        return 2;
    }
    if (y=='3')
    {
        return 3;
    }
    if (y=='4')
    {
        return 4;
    }
    if (y=='5')
    {
        return 5;
    }
    if (y=='6')
    {
        return 6;
    }
    if (y=='7')
    {
        return 7;
    }
    if (y=='8')
    {
        return 8;
    }
}
int translate_x(char x)
/**
 * @brief Функция преобразования cимвола в целое число
 * @param x - номер строки
**/
{
    if(x=='A')
    {
        return 1;
    }
    if (x=='B')
    {
        return 2;
    }
    if (x=='C')
    {
        return 3;
    }
    if (x=='D')
    {
        return 4;
    }
    if (x=='E')
    {
        return 5;
    }
    if (x=='F')
    {
        return 6;
    }
    if (x=='G')
    {
        return 7;
    }
    if (x=='H')
    {
        return 8;
    }
}
int check_x(char x)
/**
 * @brief Функция проверки значения символа х на соответствие с правилами игры и дальнейшее преобразование в числовое значение
 * @param x - номер строки
**/
{
    if(x=='A'||
            x=='B'||
            x=='C'||
            x=='D'||
            x=='E'||
            x=='F'||
            x=='G'||
            x=='H')
    {
        return translate_x(x);
    }
    else
    {
        /**@return return -1; @n
         *         В случае несоответствия условию
        **/
        return -1;
    }
}
int check_y(char y)
/**
 * @brief Функция проверки значения символа y на соответствие с правилами игры и дальнейшее преобразование в числовое значение
 * @param y - номер столбца
**/
{
    if(y=='1'||
            y=='2'||
            y=='3'||
            y=='4'||
            y=='5'||
            y=='6'||
            y=='7'||
            y=='8')
    {
        return translate_y(y);
    }
    else
    {
        /**@return return -1; @n В случае несоответствия условию
        **/
        return -1;
    }
}
void input_coord(int &Kx,int &Ky,int &Lx,int &Ly,int &Sx,int &Sy,string &main_string)
/**
 * @brief Функция ввода координат трёх фигур, с проверкой правильности координат и различности между собой
 * @param k - счётчик, определяющий ввод трёх строк
 * @param Kx,Ky - координаты короля
 * @param Lx,Ly - координаты ладьи
 * @param Sx,Sy - координаты слона
 * @param main_string - строка ввода координаты либо справка /help
**/
{
    for(int k=0; k!=3; k++)
    {
        cin>>main_string;
        if(main_string=="/help")
        {
            help(); //Вызов функции справки
            k--; //Откат на строку ввода назад и пропуск операций в цикле
            continue;
        }
        if(k==0)
        {
            Kx=check_x(main_string[0]); //Проверка символа по x и преобразование её в цифру
            Ky=check_y(main_string[1]); //Проверка символа по y и преобразование её в цифру
        }
        if(Kx==(-1)||Ky==(-1)||main_string.length()>2) //Проверка на случай несоответствия введённой координаты правилам
        {
            errors_coord(1); //Вызов функции ошибок, где 1 - ошибка неверной координаты
            k--;
            continue;
        }
        if(k==1)
        {
            Lx=check_x(main_string[0]);
            Ly=check_y(main_string[1]);
            if(Lx==(-1)||Ly==(-1)||main_string.length()>2)
            {
                errors_coord(1);
                k--;
                continue;
            }
            if(Kx==Lx&&Ky==Ly) //Проверка на случай равенства координаты короля и ладьи
            {
                errors_coord(2); //Вызов функции ошибок, где 2 - ошибка равенства координаты ладьи и короля
                k--;
                continue;
            }
        }
        if(k==2)
        {
            Sx=check_x(main_string[0]);
            Sy=check_y(main_string[1]);
            if(Sx==(-1)||Sy==(-1)||main_string.length()>2)
            {
                errors_coord(1);
                k--;
                continue;
            }
            if(Kx==Sx&&Ky==Sy)
            {
                errors_coord(3); //Вызов функции ошибок, где 3 - ошибка равенства координаты слона и короля
                k--;
                continue;
            }
            if(Lx==Sx&&Ly==Sy)
            {
                errors_coord(4); //Вызов функции ошибок, где 4 - ошибка равенства координаты ладьи и слона
                k--;
                continue;
            }
        }
    }
}
bool danger_ladya(int &Kx,int &Ky,int &Lx,int &Ly,int &Sx,int &Sy)
/**
 * @brief Функция определения опасности для короля со стороны ладьи
 * @param Kx,Ky - координаты короля
 * @param Lx,Ly - координаты ладьи
 * @param Sx,Sy - координаты слона
**/
{
    if(Kx==Lx||Ky==Ly) //Условие равенства координат ладьи и короля по x, либо по у
    {
        if(Sx==Kx||Sy==Ky) //Условие равенства координат слона и короля по x, либо по у
        {
            if((sqrt(pow(Kx-Lx,2)+pow(Ky-Ly,2)))<(sqrt(pow(Kx-Sx,2)+pow(Ky-Sy,2))))
            //Условие проверки расстояния между королём и ладьёй, королём и слоном
            {
                return 1;
            }
            if((Sx<Kx&&Lx>Kx)||(Sx>Kx&&Lx<Kx)||(Sy>Ky&&Ly<Ky)||(Sy<Ky&&Ly>Ky))
            //Условие проверки противоположности двух координат
            {
                return 1;
            }
            return 0;
        }
        else
        {
            return 1;
        }
    }
    return 0;
}
bool func_sing(int &Kx,int &Ky,int &Lx,int &Ly,int &Sx,int &Sy)
/**
 * @brief Функция определения положения слона и ладьи относительно короля в одной четверти или в разных
 * @param Kx,Ky - координаты короля
 * @param Lx,Ly - координаты ладьи
 * @param Sx,Sy - координаты слона
**/
{
    if(Sx>Kx&&Sy>Ky&&Lx>Kx&&Ly>Ky) //Условие проверки положения слона и ладьи в 1 четверти
    {
        return 1;
    }
    if(Sx<Kx&&Sy>Ky&&Lx<Kx&&Ly>Ky) //Условие проверки положения слона и ладьи в 2 четверти
    {
        return 1;
    }
    if(Sx<Kx&&Sy<Ky&&Lx<Kx&&Ly<Ky) //Условие проверки положения слона и ладьи в 3 четверти
    {
        return 1;
    }
    if(Sx>Kx&&Sy<Ky&&Lx>Kx&&Ly<Ky) //Условие проверки положения слона и ладьи в 4 четверти
    {
        return 1;
    }
    return 0;
}
bool danger_slon(int &Kx,int &Ky,int &Lx,int &Ly,int &Sx,int &Sy)
/**
 * @brief Функция определения опасности для короля со стороны слона
 * @param Kx,Ky - координаты короля
 * @param Lx,Ly - координаты ладьи
 * @param Sx,Sy - координаты слона
**/
{
    if(func_sing(Kx,Ky,Lx,Ly,Sx,Sy)) //Условие положения слона и ладьи в одной четверти
    {
        if(abs(Sx-Kx)==abs(Sy-Ky)) //Условие положения слона и короля на одной диагонали
        {
            if(abs(Sx-Lx)==abs(Sy-Ly)) //Условие положения слона и ладьи на одной диагонали
            {
                if(sqrt(pow(Sx-Kx,2)+pow(Sy-Ky,2))<sqrt(pow(Lx-Kx,2)+pow(Ly-Ky,2)))
                //Условие проверки расстояния между королём и слоном, королём и ладьёй
                {
                    return 1;
                }
            }
            else
            {
                return 1;
            }
        }
        return 0;
    }
    if(abs(Sx-Kx)==abs(Sy-Ky)) //Условие положения слона и короля на одной диагонали
    {
        return 1;
    }
    return 0;
}
void result_output(bool &DL,bool &DS)
/**
 * @brief Функция вывода конечного результата поставленной задачи
 * @param DL – опасность от ладьи
 * @param DS – опасность от слона
**/
{
    if(DL==1)
    {
        cout<<"Результат: ";
        cout<<"Шах от ладьи"<<endl;
    }
    if(DS==1)
    {
        cout<<"Результат: ";
        cout<<"Шах от слона"<<endl;
    }
    if(DS==0&&DL==0)
    {
        cout<<"Результат: ";
        cout<<"Нет шаха"<<endl;
    }
}
int main()
{
    setlocale(LC_ALL,"RUSSIAN");
    /**
     * <b>Определение переменных в программе:</b>
     * @code int Kx,Ky,Lx,Ly,Sx,Sy; @endcode
     * Kx,Ky - координаты короля, Lx,Ly - координаты ладьи, Sx,Sy - координаты слона
     * @code bool DL,DS; @endcode
     * Опасность от ладьи, DS - опасность от слона
     * @code string main_string; @endcode
     * Строка ввода координат @n
     * <b>Вызов функций:</b>
     * @code
     *  input_coord(Kx,Ky,Lx,Ly,Sx,Sy,main_string);
     *  DL=danger_ladya(Kx,Ky,Lx,Ly,Sx,Sy);
     *  DS=danger_slon(Kx,Ky,Lx,Ly,Sx,Sy);
     *  result_output(DL,DS);
     * @endcode
    **/
    int Kx,Ky,Lx,Ly,Sx,Sy; //Kx,Ky - координаты короля, Lx,Ly - координаты ладьи, Sx,Sy - координаты слона
    bool DL,DS; //DL - опасность от ладьи, DS - опасность от слона
    string main_string; //Строка ввода координат
    input_coord(Kx,Ky,Lx,Ly,Sx,Sy,main_string); //Функция ввода координа
    DL=danger_ladya(Kx,Ky,Lx,Ly,Sx,Sy); //Присваивание DL результат работы функции определения опасности для короля от ладьи
    DS=danger_slon(Kx,Ky,Lx,Ly,Sx,Sy); //Присваивание DS результат работы функции определения опасности для короля от слона
    result_output(DL,DS); //Функция вывода конечного результата поставленной задачи
    system("pause");
    return 0;
}
